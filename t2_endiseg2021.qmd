---
title: "T2: ENDISEG 2021"
---

## Previo

### Descarga el proyecto desde acá

En esta liga puedes descarga el proyecto de trabajo. De esta manera no tendremos problemas con las rutas relativas.

<https://tinyurl.com/demos-talleres>

## Video de la sesión

<iframe src="https://www.facebook.com/plugins/video.php?height=314&href=https%3A%2F%2Fwww.facebook.com%2Frladiescdmx%2Fvideos%2F909693547386028%2F&show_text=false&width=560&t=0" width="560" height="314" style="border:none;overflow:hidden" scrolling="no" frameborder="0" allowfullscreen="true" allow="autoplay; clipboard-write; encrypted-media; picture-in-picture; web-share" allowFullScreen="true"></iframe></iframe>

### Paquetes

```{r}
if (!require("pacman")) install.packages("pacman") # instala pacman si se requiere
pacman::p_load(tidyverse,
               haven, 
               readr,
               foreign,
               janitor,
               magrittr,
               pollster,
               srvyr,
               sjlabelled) #carga los paquetes necesarios 
```

En esta práctica trabajaremos con los datos abiertos.

¿Qué son datos abiertos?

<https://publications.iadb.org/publications/spanish/viewer/Los-datos-abiertos-en-América-Latina-y-el-Caribe.pdf>

## Introducción a la fuente

De acuerdo a la información en los datos abiertos, hay cinco conjuntos de datos, uno a nivel vivienda y tres a nivel individuo:

-   Vivienda: tviv

-   Individual: tsdem

-   Individual - persona elegida: tapart_a

-   Individual - persona elegida: tapart_b

-   Individual - persona elegida: tmodulo

Además esta base no tiene una sólo variable del id. Tiene un *identificador compuesto*. Podemos hacer un objeto tipo vector

```{r}
idviv<-c("folio", "viv_sel")
idper<-c("folio", "viv_sel", "hogar", "n_ren")
```

## Importación de los datos

Aprovechamos y agregaremos un paso para limpiar los nombres con `janitor::clean_names()` utiliza el formato *snakecase*, quitará espacios y les pondra guión bajo, las mayúsculas se vuelven minúsculas y quita caracteres especiales.

```{r}

tvivienda <- readr::read_csv("data_t2/conjunto_de_datos_endiseg_2021_csv/conjunto_de_datos_tvivienda_endiseg_2021/conjunto_de_datos/conjunto_de_datos_tvivienda_endiseg_2021.csv") %>% janitor::clean_names()

tsdem <- readr::read_csv("data_t2/conjunto_de_datos_endiseg_2021_csv/conjunto_de_datos_tsdem_endiseg_2021/conjunto_de_datos/conjunto_de_datos_tsdem_endiseg_2021.csv") %>% janitor::clean_names()

tmodulo <- readr::read_csv("data_t2/conjunto_de_datos_endiseg_2021_csv/conjunto_de_datos_tmodulo_endiseg_2021/conjunto_de_datos/conjunto_de_datos_tmodulo_endiseg_2021.csv") %>%
  janitor::clean_names() %>% 
  dplyr::mutate(seleccionade=1)

tapart_a <- readr::read_csv("data_t2/conjunto_de_datos_endiseg_2021_csv/conjunto_de_datos_tapart_a_endiseg_2021/conjunto_de_datos/conjunto_de_datos_tapart_a_endiseg_2021.csv") %>% janitor::clean_names()

tapart_b <- readr::read_csv("data_t2/conjunto_de_datos_endiseg_2021_csv/conjunto_de_datos_tapart_b_endiseg_2021/conjunto_de_datos/conjunto_de_datos_tapart_b_endiseg_2021.csv") %>% janitor::clean_names()

```

## Fusionado uno a uno con diferentes conjuntos.

Me gusta empezar con el modulo que tiene más casos y este sería mi "left" o conjunto "x"

```{r}
endiseg2021<-tsdem %>% 
  dplyr::left_join(tmodulo, by=idper) %>% 
  dplyr::select(-ends_with(".y")) %>% # quita todas las variables que terminan en .x
  dplyr::rename_with(~ stringr::str_remove(.x,  pattern = ".x"),  ends_with(".x")) 
```

Si checas me quedo con las variables repetidas que están en la izquierda, porque es mi conjunto más completo.

Hacemos lo mismo con tapart_a:

```{r}
endiseg2021<-endiseg2021 %>% 
  dplyr::left_join(tapart_a, by=idper) %>% 
  dplyr::select(-ends_with(".y")) %>% # quita todas las variables que terminan en .x
  dplyr::rename_with(~ stringr::str_remove(.x,  pattern = ".x"),  ends_with(".x")) 
```

Hacemos lo mismo con el tapart_b

```{r}
endiseg2021<-endiseg2021 %>% 
  dplyr::left_join(tapart_b, by=idper) %>% 
  dplyr::select(-ends_with(".y")) %>% # quita todas las variables que terminan en .x
  dplyr::rename_with(~ stringr::str_remove(.x,  pattern = ".x"),  ends_with(".x")) 
```

Y hoy agregamos la vivienda. Como para tener la lógica del cuestionario en nuestro dataframe, lo pondre como left:

```{r}
endiseg2021<-tvivienda %>% 
  dplyr::left_join(endiseg2021, by=idviv) %>% #ojo cambiamos acá
  dplyr::select(-ends_with(".y")) %>% # quita todas las variables que terminan en .x
  dplyr::rename_with(~ stringr::str_remove(.x,  pattern = ".x"),  ends_with(".x")) 
```

Vamos a botar los objetos anteriores, porque vamos a importar diccionarios y más para etiquetar nuestras variables.

```{r}
rm(tvivienda, tsdem, tmodulo, tapart_a, tapart_b)
gc() # limpiamos la memoria
```

## Etiquetado de variables

### Diccionario de variables

El formato abierto tiene la ventaja que siempre vendrá con diccionarios. Esto nos puede ayudar muchísimo.

Vamos a importar el diccionario del modulo que tiene las preguntas que más nos interesan

```{r}
dicc_tmodulo<- readr::read_csv("data_t2/conjunto_de_datos_endiseg_2021_csv/conjunto_de_datos_tmodulo_endiseg_2021/diccionario_de_datos/diccionario_datos_tmodulo_endiseg_2021.csv") %>% clean_names()

```

Vamos a utilizar algunos elementos de cadena, para hacer la información más corta

```{r}
dicc_tmodulo<-dicc_tmodulo %>% 
  mutate(nombre_campo=stringr::str_remove_all(nombre_campo, "Pregunta "))
```

Pensemos que queremos saber cuál es el título de variable p7

```{r}
dicc_tmodulo %>% 
  filter(nemonico=="p7_1") %>% 
  select(nombre_campo)
```

Vamos a guardar esto

```{r}
dicc_tmodulo %>% 
  filter(nemonico=="p7_1") %>% 
  select(nombre_campo) -> label_p7_1
```

Con este proceso se puede automatizar un poco:

```{r}
endiseg2021 %<>% 
  mutate(p7_1=sjlabelled::set_label(p7_1, label=label_p7_1$nombre_campo))
```

Revisamos que tengamos el atributo

```{r}
glimpse(endiseg2021$p7_1)
```

### Catalogos de valores

Estos nos servirán para etiquetas los valores de las variables. Hay un catálogo por variable. Sigamos con la variable p7_1

```{r}
labels_p7_1 <- read_csv("data_t2/conjunto_de_datos_endiseg_2021_csv/conjunto_de_datos_tmodulo_endiseg_2021/catalogos/p7_1.csv") %>% clean_names()

```

Vamos a etiquetar hoy los valores

```{r}
endiseg2021 %<>% 
  mutate(p7_1=sjlabelled::set_labels(p7_1, labels = labels_p7_1$descrip))
```

Revisamos que tengamos el atributo

```{r}
glimpse(endiseg2021$p7_1)
```

## Tabulados

### Tabulados con {janitor}

Sin factores de expansión este es un gran comando.

```{r}
endiseg2021 %>% 
  filter(seleccionade==1) %>% 
  mutate(p7_1=as_label(p7_1)) %>% 
  janitor::tabyl(p7_1) %>% 
  janitor::adorn_totals() %>% 
  janitor::adorn_pct_formatting(digits=2)
```

Vamos a utilizar una segunda variable

```{r}
dicc_tmodulo %>% 
  filter(nemonico=="p8_1") %>% 
  select(nombre_campo) -> label_p8_1

endiseg2021 %<>% 
  mutate(p8_1=sjlabelled::set_label(p8_1, label=label_p8_1$nombre_campo))
```

```{r}
labels_p8_1 <- read_csv("data_t2/conjunto_de_datos_endiseg_2021_csv/conjunto_de_datos_tmodulo_endiseg_2021/catalogos/p8_1.csv", locale = locale(encoding = "latin1")) %>% clean_names()

endiseg2021 %<>% 
  mutate(p8_1=sjlabelled::set_labels(p8_1, labels = labels_p8_1$descrip))
```

```{r}
endiseg2021 %>% 
  filter(seleccionade==1) %>% 
  mutate(p7_1=as_label(p7_1)) %>% 
  mutate(p8_1=as_label(p8_1)) %>% 
  janitor::tabyl(p8_1, p7_1) %>% 
  janitor::adorn_totals(where=c("row", "col")) %>% 
  janitor::adorn_percentages("col") %>% 
  janitor::adorn_pct_formatting(digits=2)
```

### Tabulados con {pollster}

Podemos incluir el factor de expansión

```{r}
endiseg2021 %>% 
  filter(seleccionade==1) %>% 
  mutate(p7_1=as_label(p7_1)) %>% 
  pollster::topline(p7_1, weight = factor) 
```

```{r}
endiseg2021 %>% 
  filter(seleccionade==1) %>% 
  mutate(p7_1=as_label(p7_1)) %>% 
  pollster::moe_topline(p7_1, weight = factor) # margin of error
```

Doble entrada

```{r}
endiseg2021 %>% 
  filter(seleccionade==1) %>% 
  mutate(p7_1=as_label(p7_1)) %>% 
  mutate(p8_1=as_label(p8_1)) %>% 
  pollster::crosstab(p8_1, p7_1, weight = factor, pct_type = "col") 
```

```{r}
endiseg2021 %>% 
  filter(seleccionade==1) %>% 
  mutate(p7_1=as_label(p7_1)) %>% 
  mutate(p8_1=as_label(p8_1)) %>% 
  pollster::moe_crosstab(p8_1, p7_1, weight = factor) 
```

## Diseño muestral

```{r}
endiseg_svyr <- endiseg2021 %>%
  select(upm_dis, est_dis, factor, seleccionade, p7_1, p8_1, p4_1) %>% 
  srvyr::as_survey_design(
    upm = upm_dis, 
    strata = est_dis,
    weights = factor,
    nest = TRUE)
```

Para una media ponderada

```{r}
endiseg_svyr %>%
  filter(seleccionade==1) %>% 
  summarise(
    media_ponderada = survey_mean(p4_1, na.rm=T))

```

Si queremos los intervalos de confianza:

```{r}
endiseg_svyr %>%
  filter(seleccionade==1) %>% 
  summarise(
    media_ponderada = survey_mean(p4_1, na.rm=T, vartype="ci"))

```

Esto se puede tardar

```{r}
endiseg_svyr %>%
  filter(seleccionade==1) %>% 
  mutate(p8_1=as_label(p8_1)) %>% 
  group_by(p8_1) %>% 
  summarise(
    media_ponderada = survey_mean(p4_1, na.rm=T, vartype="ci"))

```

```{r}
endiseg_svyr %>%
  filter(seleccionade==1) %>% 
  mutate(p8_1=as_label(p8_1)) %>% 
  group_by(p8_1) %>% #variables cuali
  summarise(proportion = survey_mean())
```
