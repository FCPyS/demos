---
title: "T1: Cuestionario Ampliado"
---

## Previo

### Introducción

Aquí dejo la presentación

<iframe src="./01_ppt2023.pdf" title="Taller 1" width="600" height="400">

</iframe>

### Descarga el proyecto desde acá

En esta liga puedes descarga el proyecto de trabajo. De esta manera no tendremos problemas con las rutas relativas.

<https://tinyurl.com/demos-talleres>

## Video de la sesión

<iframe src="https://www.facebook.com/plugins/video.php?height=314&amp;href=https%3A%2F%2Fwww.facebook.com%2Frladiescdmx%2Fvideos%2F776827570764633%2F&amp;show_text=false&amp;width=560&amp;t=0" width="560" height="314" style="border:none;overflow:hidden" scrolling="no" frameborder="0" allowfullscreen="true" allow="autoplay; clipboard-write; encrypted-media; picture-in-picture; web-share" allowFullScreen="true">

</iframe>

</iframe>

### Paquetes

```{r}
if (!require("pacman")) install.packages("pacman") # instala pacman si se requiere
pacman::p_load(tidyverse,
               haven, 
               readr,
               foreign,
               janitor) #carga los paquetes necesarios 
```

## Importación de datos

Recuerdo que se debe revisar la documentación

https://www.inegi.org.mx/programas/ccpv/2020/#Microdatos

### Desde .csv

Los archivos ".csv" son archivos separados por comas. Los podemos abrir con un bloc de notas para revisar

Hay dos comandos que nos permiten importar archivos de texto, el de base `read.csv()` y `readr::read_csv()`

```{r}
viviendas01 <- read.csv("data_t1/Viviendas01.CSV")
```

revisemos los nombres y las primeres 6 líneas

```{r}

names(viviendas01)
head(viviendas01)

```

```{r}
viviendas01 <- read_csv("data_t1/Viviendas01.CSV")

names(viviendas01)
head(viviendas01)
```

### Desde SAS

```{r}
viviendas01 <- haven::read_sas("data_t1/viviendas01.sas7bdat")

names(viviendas01)
head(viviendas01)
```

### Desde .dta

```{r}
viviendas01 <- haven::read_dta("data_t1/Viviendas01.dta")
```

### Desde .sav

```{r}
viviendas01 <- haven::read_sav("data_t1/Viviendas01.sav")
```

## Fusionado de datos

Para ello vamos a importar también la base de personas

```{r}
personas01 <- haven::read_sav("data_t1/Personas01.SAV")

```

Veamos las dimensiones de estas tablas

```{r}
dim(viviendas01)
dim(personas01)
```

Con el INEGI no hay problema, pero bien vale revisar los id sean únicos:

```{r}
viviendas01 %>% 
  janitor::get_dupes(ID_VIV)


personas01 %>% 
  janitor::get_dupes(ID_PERSONA)

```

### Con `merge()`

#### Casos en ambas bases

Por *default*, el comando tiene activado la opción "all = FALSE", que nos deja los datos de ambas bases comunes. (tipo una intersección)

```{r}
cacenso01<-merge(viviendas01, 
                 personas01,
                 by="ID_VIV", 
                 all = F)
dim(cacenso01)
```

```{r}
names(cacenso01)
```

#### Todos los casos

Si cambiamos la opción "all = TRUE", que nos deja los datos comunes a ambas bases. (como una unión)

```{r}
cacenso01<-merge(viviendas01,
                   personas01, 
                   by="ID_VIV", 
                   all = T)
dim(cacenso01)
```

#### Casos en la base 1

Si queremos quedarnos con todos los datos que hay en la primera base, x, vamos a usar a opción all.x = TRUE.

```{r}
cacenso01<-merge(viviendas01, 
                   personas01,
                   by="ID_VIV", 
                   all.x  = TRUE)
dim(cacenso01)
```

#### Casos de la base 2

Notamos que hoy sí tenemos los datos de toda la población y hay missings en las variables aportadas por la base de trabajo

Si queremos lo contrario, quedarnos con los datos aportados por la segunda base, y, vamos a usar la opción all.y=TRUE

```{r}
cacenso01<-merge(viviendas01, 
                   personas01,
                   by="ID_VIV",
                   all.y  = TRUE)
dim(cacenso01)
```

### Con `{dplyr}`

El caso 1:

```{r}
cacenso01<-dplyr::inner_join(viviendas01,
                               personas01,
                               by="ID_VIV")
dim(cacenso01)

```

El caso 2:

```{r}
cacenso01<-dplyr::full_join(viviendas01, 
                              personas01, 
                              by="ID_VIV")
dim(cacenso01)

```

El caso 3:

```{r}
cacenso01<-dplyr::left_join(viviendas01,
                              personas01, 
                              by="ID_VIV")
dim(cacenso01)

```

El caso 4:

```{r}
cacenso01<-dplyr::right_join(viviendas01, 
                               personas01,
                               by="ID_VIV")
dim(cacenso01)

```

También se puede usar con pipes, cualquier opción de dplyr

```{r}
cacenso01<-viviendas01 %>% # pongo el conjunto que será la "izquierda
  dplyr::right_join(personas01, 
                    by="ID_VIV")
dim(cacenso01)
```

## Agregar casos

Supongamos que queremos pegar la información de viviendas de Aguascalientes y Tlaxcala

```{r}
viviendas29 <- read_sav("data_t1/Viviendas29.SAV")
```

### Con `rbind()`

```{r}
viviendas01_29<-rbind(viviendas01, viviendas29)
```

```{r}
table(viviendas01_29$ENT)

```

### Con `dplyr::bind_rows`

```{r}
viviendas01_29<-dplyr::bind_rows(viviendas01, viviendas29)
```
